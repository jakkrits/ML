A = [1 2; 3 4; 5 6]B = [11 12; 13 14; 15 16]C = [1 1; 2 2]A * C                       % regular matrix multiplicationA .* B                      % element-wise operationA .^2                       % element-wise square of A matrix1 ./A                       % element-wise reciprocal of AV = [1; 2; 3]log(V)                      % log of each element (ln)exp(V)                      % exp of each element  (e^x)neg_V = -Vabs(neg_V)% add ones to Vadded = V + ones(length(V), 1)added'(added')'% get max value of a matrix and index each columns[val, ind] = max(B)% comparison element-wiseB < 0% find index where element is ...find(B > 13)                  % this gets back indices in 1 column manner[row_index, column_index] = find(B > 13)% sum and productsum(B)sum(B, 1)                    % per column sumsum(B, 2)                    % per row sumprod(B)% floor & ceilfloor(B)ceil(B)% get max along columnrandom_3 = rand(3)[val, ind] = max(random_3)   % this is previous example --> per columnmax(random_3, [], 1)         % 1 at the end --> per columnmax(random_3, [], 2)         % 2 --> per row% magic matrix --> sum of rows, columns and diagonals are equalMagic_A = magic(10)ID_A = eye(10)Magic_A .* ID_Asum(sum(Magic_A .* ID_A))     % diagonally top left to bottom rightsum(sum(Magic_A .* flipud(ID_A)))